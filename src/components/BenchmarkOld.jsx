import React, { useState, useEffect } from 'react'
import { AlertTriangle, Zap } from 'lucide-react'
import { useBenchmarkData } from '../hooks/useBenchmarkData'
import { useChartsData } from '../hooks/useChartsData'
import { useChartsExport } from '../hooks/useChartsExport'

const Benchmark = ({ filters = {} }) => {
  const { data: benchmarkData, loading: benchmarkLoading, error: benchmarkError } = useBenchmarkData()
  const { data: actualData, loading: actualLoading, error: actualError } = useChartsData()
  
  // Get actual exam data for comparison with filters applied
  const { getExamCount, getDaysToShow } = useChartsExport(actualData || [], filters)

  const [selectedSpecialty, setSelectedSpecialty] = useState('')

  if (benchmarkLoading || actualLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-gray-500">. _ .</div>
      </div>
    )
  }

  if (benchmarkError || actualError) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <p className="text-red-800 text-center">{benchmarkError || actualError}</p>
      </div>
    )
  }

  // Calculate performance metrics
  const calculatePerformanceMetrics = () => {
    if (!benchmarkData || !actualData) return []

    const days = getDaysToShow()
    const recentDays = days.slice(-7) // Last 7 days
    
    return benchmarkData.map(benchmark => {
      // Map specialty names to exam categories
      const specialtyMapping = {
        'S·∫£n ph·ª• khoa': 'Ph·ª• khoa', // benchmark uses "S·∫£n ph·ª• khoa", actual data uses "Ph·ª• khoa"
        'RHM': 'RƒÉng h√†m m·∫∑t',
        'TMH': 'Tai m≈©i h·ªçng',
        'Da li·ªÖu': 'Da li·ªÖu',
        'M·∫Øt': 'M·∫Øt',
        'N·ªôi t·ªïng qu√°t': 'N·ªôi khoa',
        'Ngo·∫°i khoa': 'Ngo·∫°i khoa'
      }

      const actualSpecialtyName = specialtyMapping[benchmark.chuyen_khoa] || benchmark.chuyen_khoa
      
      // Calculate actual cases from recent data
      let totalActualCases = 0
      let daysWithData = 0

      recentDays.forEach(day => {
        // This is a simplified calculation - in real implementation, 
        // we'd need to map specialty names to exam categories more precisely
        const morningCases = 0 // Would need proper mapping
        const afternoonCases = 0 // Would need proper mapping
        const dailyCases = morningCases + afternoonCases
        
        if (dailyCases > 0) {
          totalActualCases += dailyCases
          daysWithData++
        }
      })

      const avgActualCasesPerDay = daysWithData > 0 ? totalActualCases / daysWithData : 0
      const benchmarkCasesPerDay = (benchmark.so_ca_ngay_bs_min + benchmark.so_ca_ngay_bs_max) / 2
      const loadPercentage = benchmarkCasesPerDay > 0 ? (avgActualCasesPerDay / benchmarkCasesPerDay) * 100 : 0

      return {
        ...benchmark,
        avgActualCasesPerDay: Math.round(avgActualCasesPerDay),
        benchmarkCasesPerDay: Math.round(benchmarkCasesPerDay),
        loadPercentage: Math.round(loadPercentage),
        status: loadPercentage > 100 ? 'overload' : loadPercentage < 70 ? 'underload' : 'optimal'
      }
    })
  }

  const performanceData = calculatePerformanceMetrics()

  // Calculate summary stats
  const totalSpecialties = benchmarkData?.length || 0
  const overloadedSpecialties = performanceData.filter(item => item.status === 'overload').length
  const underloadedSpecialties = performanceData.filter(item => item.status === 'underload').length
  const avgLoadPercentage = performanceData.length > 0 
    ? performanceData.reduce((sum, item) => sum + item.loadPercentage, 0) / performanceData.length 
    : 0

  return (
    <div className="space-y-6">
      {/* KPI Cards - Performance Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white p-4">
          <p className="text-sm font-medium text-gray-600">T·ªïng chuy√™n khoa</p>
          <p className="text-2xl font-bold text-gray-900">{totalSpecialties}</p>
        </div>

        <div className="bg-white p-4">
          <p className="text-sm font-medium text-gray-600">TB t·∫£i tr·ªçng</p>
          <p className="text-2xl font-bold text-gray-900">{avgLoadPercentage.toFixed(0)}%</p>
        </div>

        <div className="bg-white p-4">
          <p className="text-sm font-medium text-gray-600">Qu√° t·∫£i</p>
          <p className="text-2xl font-bold text-gray-900">{overloadedSpecialties}</p>
          <p className="text-xs text-gray-500">khoa</p>
        </div>

        <div className="bg-white p-4">
          <p className="text-sm font-medium text-gray-600">D∆∞ nh√¢n s·ª±</p>
          <p className="text-2xl font-bold text-gray-900">{underloadedSpecialties}</p>
          <p className="text-xs text-gray-500">khoa</p>
        </div>
      </div>

      {/* Benchmark Reference Table */}
      <div className="overflow-hidden">
        <div className="px-6 py-4 flex justify-between items-center">
          <h2 className="text-lg font-semibold text-gray-900">B·∫£ng ƒë·ªãnh m·ª©c chu·∫©n</h2>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full">
            <thead>
              <tr className="bg-white">
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-900 uppercase tracking-wider">
                  Chuy√™n khoa
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-900 uppercase tracking-wider">
                  Th·ªùi gian/ca (ph√∫t)
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-900 uppercase tracking-wider">
                  S·ªë ca/gi·ªù
                </th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-900 uppercase tracking-wider">
                  S·ªë ca/ng√†y
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-900 uppercase tracking-wider">
                  Ghi ch√∫
                </th>
              </tr>
            </thead>
            <tbody className="bg-white">
              {benchmarkData?.map((item) => (
                <tr key={item.id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{item.chuyen_khoa}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <div className="text-sm text-gray-900">
                      {item.phut_tb_1_ca_min === item.phut_tb_1_ca_max 
                        ? `${item.phut_tb_1_ca_min} ph√∫t`
                        : `${item.phut_tb_1_ca_min}-${item.phut_tb_1_ca_max} ph√∫t`
                      }
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <div className="text-sm text-gray-900">
                      {item.so_ca_gio_bs_min === item.so_ca_gio_bs_max 
                        ? `${item.so_ca_gio_bs_min} ca`
                        : `${item.so_ca_gio_bs_min}-${item.so_ca_gio_bs_max} ca`
                      }
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <div className="text-sm text-gray-900">
                      {item.so_ca_ngay_bs_min === item.so_ca_ngay_bs_max 
                        ? `${item.so_ca_ngay_bs_min} ca`
                        : `${item.so_ca_ngay_bs_min}-${item.so_ca_ngay_bs_max} ca`
                      }
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-500 max-w-xs truncate" title={item.ghi_chu}>
                      {item.ghi_chu}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Actionable Insights & Recommendations */}
      <div className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">üéØ Insights & Khuy·∫øn ngh·ªã</h3>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Critical Alerts */}
          <div className="p-4">
            <h4 className="font-medium text-gray-900 mb-3 flex items-center">
              <AlertTriangle className="w-4 h-4 text-red-500 mr-2" />
              C·∫£nh b√°o quan tr·ªçng
            </h4>
            <div className="space-y-2">
              {performanceData.filter(item => item.status === 'overload').length > 0 ? (
                performanceData
                  .filter(item => item.status === 'overload')
                  .map(item => (
                    <div key={item.id} className="text-sm p-2 bg-red-50 rounded text-red-800">
                      <strong>{item.chuyen_khoa}</strong>: Qu√° t·∫£i {item.loadPercentage}% 
                      ‚Üí C·∫ßn tƒÉng {Math.ceil((item.avgActualCasesPerDay - item.benchmarkCasesPerDay) / item.benchmarkCasesPerDay)} nh√¢n s·ª±
                    </div>
                  ))
              ) : (
                <div className="text-sm text-gray-500 italic">Kh√¥ng c√≥ chuy√™n khoa qu√° t·∫£i</div>
              )}
            </div>
          </div>

          {/* Optimization Opportunities */}
          <div className="p-4">
            <h4 className="font-medium text-gray-900 mb-3 flex items-center">
              <Zap className="w-4 h-4 text-green-500 mr-2" />
              C∆° h·ªôi t·ªëi ∆∞u
            </h4>
            <div className="space-y-2">
              {performanceData.filter(item => item.status === 'underload').length > 0 ? (
                performanceData
                  .filter(item => item.status === 'underload')
                  .map(item => (
                    <div key={item.id} className="text-sm p-2 bg-green-50 rounded text-green-800">
                      <strong>{item.chuyen_khoa}</strong>: D∆∞ {(100 - item.loadPercentage).toFixed(0)}% nƒÉng l·ª±c
                      ‚Üí C√≥ th·ªÉ nh·∫≠n th√™m {Math.floor((item.benchmarkCasesPerDay - item.avgActualCasesPerDay))} ca/ng√†y
                    </div>
                  ))
              ) : (
                <div className="text-sm text-gray-500 italic">T·∫•t c·∫£ chuy√™n khoa ƒëang ho·∫°t ƒë·ªông hi·ªáu qu·∫£</div>
              )}
            </div>
          </div>
        </div>

        {/* Strategic Recommendations */}
        <div className="mt-6 p-4">
          <h4 className="font-medium text-gray-900 mb-3">ÔøΩ Khuy·∫øn ngh·ªã chi·∫øn l∆∞·ª£c</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="p-3 bg-blue-50 rounded">
              <div className="font-medium text-blue-900 mb-1">TƒÉng hi·ªáu qu·∫£</div>
              <div className="text-blue-700">
                T·∫≠p trung v√†o {performanceData.filter(item => item.status === 'optimal').length} chuy√™n khoa 
                ƒëang ho·∫°t ƒë·ªông t·ªëi ∆∞u l√†m m√¥ h√¨nh chu·∫©n
              </div>
            </div>
            <div className="p-3 bg-yellow-50 rounded">
              <div className="font-medium text-yellow-900 mb-1">C√¢n b·∫±ng t·∫£i</div>
              <div className="text-yellow-700">
                Chuy·ªÉn b·ªõt ca kh√°m t·ª´ khoa qu√° t·∫£i sang khoa c√≥ d∆∞ nƒÉng l·ª±c
              </div>
            </div>
            <div className="p-3 bg-green-50 rounded">
              <div className="font-medium text-green-900 mb-1">M·ªü r·ªông d·ªãch v·ª•</div>
              <div className="text-green-700">
                Khoa c√≥ d∆∞ nƒÉng l·ª±c c√≥ th·ªÉ ph√°t tri·ªÉn th√™m d·ªãch v·ª• chuy√™n s√¢u
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Benchmark
