/**
 * H·ªá th·ªëng g·ª≠i email c·∫£nh b√°o khi s·ªë l∆∞·ª£ng kh√°m v∆∞·ª£t ng∆∞·ª°ng
 */

/**
 * Function ch√≠nh ƒë·ªÉ ki·ªÉm tra v√† g·ª≠i c·∫£nh b√°o email
 * ƒê∆∞·ª£c g·ªçi t·ª´ trigger sau khi sync data
 */
function checkAndSendAlert() {
  try {
    console.log('=== B·∫Øt ƒë·∫ßu ki·ªÉm tra c·∫£nh b√°o email ===')
    
    // Ki·ªÉm tra th·ªùi gian c√≥ h·ª£p l·ªá kh√¥ng
    if (!isInAlertTimeWindow()) {
      console.log('Ngo√†i khung gi·ªù c·∫£nh b√°o, b·ªè qua')
      return
    }
    
    // L·∫•y d·ªØ li·ªáu t·ª´ sheet
    const data = getDataFromSheet()
    if (!data || data.length === 0) {
      console.log('Kh√¥ng c√≥ d·ªØ li·ªáu, b·ªè qua')
      return
    }
    
    // T√≠nh to√°n cho th√°ng hi·ªán t·∫°i
    const now = new Date()
    const currentMonth = now.getMonth() + 1
    const currentYear = now.getFullYear()
    
    const dates = getDateRange(currentYear, currentMonth)
    const dailyTotals = calculateDailyTotals(data, dates)
    
    // Ki·ªÉm tra c√°c ng√†y v∆∞·ª£t ng∆∞·ª°ng
    const threshold = getThresholdFromSheet()
    const alertDays = []
    
    dates.forEach((date, index) => {
      const total = dailyTotals[index]
      if (total > threshold) {
        const companies = getCompaniesForDate(data, date)
        const breakdown = getDayBreakdown(data, date)
        
        alertDays.push({
          date: date,
          total: total,
          morning: breakdown.morning,
          afternoon: breakdown.afternoon,
          companies: companies,
          threshold: threshold
        })
      }
    })
    
    if (alertDays.length === 0) {
      console.log('Kh√¥ng c√≥ ng√†y n√†o v∆∞·ª£t ng∆∞·ª°ng')
      updateDailyCheckSheet(dates, dailyTotals, [])
      return
    }
    
    console.log(`T√¨m th·∫•y ${alertDays.length} ng√†y v∆∞·ª£t ng∆∞·ª°ng`)
    
    // Ki·ªÉm tra xem c√≥ c·∫ßn g·ª≠i email kh√¥ng (tr√°nh spam)
    const shouldSend = alertDays.filter(day => shouldSendAlertForDay(day))
    
    if (shouldSend.length > 0) {
      sendAlertEmail(shouldSend)
      recordSentAlerts(shouldSend)
    }
    
    // C·∫≠p nh·∫≠t sheet theo d√µi
    updateDailyCheckSheet(dates, dailyTotals, alertDays)
    
    console.log('=== Ho√†n th√†nh ki·ªÉm tra c·∫£nh b√°o ===')
    
  } catch (error) {
    console.error('L·ªói trong checkAndSendAlert:', error)
    
    // G·ª≠i email b√°o l·ªói cho admin
    try {
      MailApp.sendEmail({
        to: EMAIL_CONFIG.recipients[0],
        subject: 'üö® L·ªói h·ªá th·ªëng c·∫£nh b√°o Apps Script',
        htmlBody: `
          <h3>C√≥ l·ªói x·∫£y ra trong h·ªá th·ªëng c·∫£nh b√°o:</h3>
          <pre>${error.toString()}</pre>
          <br>
          <small>Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}</small>
        `
      })
    } catch (mailError) {
      console.error('Kh√¥ng th·ªÉ g·ª≠i email b√°o l·ªói:', mailError)
    }
  }
}

/**
 * Ki·ªÉm tra xem c√≥ n√™n g·ª≠i c·∫£nh b√°o cho ng√†y n√†y kh√¥ng
 */
function shouldSendAlertForDay(dayData) {
  const sheet = getOrCreateLogSheet()
  const lastRow = sheet.getLastRow()
  
  if (lastRow <= 1) return true // Ch∆∞a c√≥ log n√†o
  
  // T√¨m log g·∫ßn nh·∫•t cho ng√†y n√†y
  const dateStr = formatDate(dayData.date)
  const data = sheet.getRange(2, 1, lastRow - 1, 7).getValues()
  
  for (let i = data.length - 1; i >= 0; i--) {
    const row = data[i]
    if (row[0] === dateStr && row[6]) { // C√≥ g·ª≠i email
      const lastSentTotal = row[1]
      const increase = dayData.total - lastSentTotal
      
      // Ch·ªâ g·ª≠i l·∫°i n·∫øu tƒÉng ƒë√°ng k·ªÉ
      return increase >= ALERT_CONFIG.minimumIncreaseForResend
    }
  }
  
  return true // Ch∆∞a t·ª´ng g·ª≠i cho ng√†y n√†y
}

/**
 * G·ª≠i email c·∫£nh b√°o
 */
function sendAlertEmail(alertDays) {
  const emails = getEmailsFromSheet()
  
  alertDays.forEach(dayData => {
    const emailContent = buildEmailContent(dayData)
    const subject = EMAIL_CONFIG.subjectTemplate
      .replace('{date}', formatDate(dayData.date))
      .replace('{threshold}', dayData.threshold)
      .replace('{total}', dayData.total)
    
    const finalSubject = DEBUG_CONFIG.enabled ? 
      DEBUG_CONFIG.testPrefix + subject : subject
      
    const recipients = DEBUG_CONFIG.enabled ? 
      [DEBUG_CONFIG.testEmail] : emails
    
    recipients.forEach(email => {
      try {
        MailApp.sendEmail({
          to: email,
          subject: finalSubject,
          htmlBody: emailContent
        })
        
        console.log(`ƒê√£ g·ª≠i email c·∫£nh b√°o ƒë·∫øn ${email} cho ng√†y ${formatDate(dayData.date)}`)
        
      } catch (error) {
        console.error(`L·ªói g·ª≠i email ƒë·∫øn ${email}:`, error)
      }
    })
    
    // Delay nh·ªè gi·ªØa c√°c email ƒë·ªÉ tr√°nh rate limit
    Utilities.sleep(1000)
  })
}

/**
 * T·∫°o n·ªôi dung email HTML
 */
function buildEmailContent(dayData) {
  const topCompanies = dayData.companies
    .sort((a, b) => b.total - a.total)
    .slice(0, 6)
  
  const companyList = topCompanies.map((company, index) => 
    `${index + 1}. ${company.name} - ${company.total} ng∆∞·ªùi (S√°ng: ${company.morning}, Chi·ªÅu: ${company.afternoon})`
  ).join('\n')
  
  const suggestions = []
  if (dayData.total > dayData.threshold + 50) {
    suggestions.push('C√≥ th·ªÉ chuy·ªÉn m·ªôt ph·∫ßn sang ng√†y kh√°c')
  }
  if (topCompanies.length > 0 && topCompanies[0].total > 50) {
    suggestions.push('∆Øu ti√™n ƒëi·ªÅu ch·ªânh c√°c c√¥ng ty c√≥ s·ªë l∆∞·ª£ng l·ªõn')
  }
  suggestions.push('Ki·ªÉm tra ph√¢n b·ªï s√°ng/chi·ªÅu ƒë·ªÉ c√¢n b·∫±ng t·∫£i')
  
  const timestamp = new Date().toLocaleString('vi-VN')
  
  return `
    <div style="font-family: Calibri, sans-serif; color: #000000; background: #ffffff; max-width: 600px; padding: 20px;">
      
      <h2 style="color: #000000; font-weight: bold; margin-bottom: 20px;">
        C·∫¢NH B√ÅO L·ªäCH KH√ÅM NG√ÄY ${formatDate(dayData.date).toUpperCase()}
      </h2>
      
      <div style="margin-bottom: 25px;">
        <h3 style="color: #000000; font-weight: bold; margin-bottom: 15px;">T·ªïng quan</h3>
        <div style="line-height: 1.8; color: #000000;">
          T·ªïng s·ªë ng∆∞·ªùi: <strong>${dayData.total} ng∆∞·ªùi</strong> (v∆∞·ª£t ${dayData.total - dayData.threshold} ng∆∞·ªùi)<br>
          Bu·ªïi s√°ng: ${dayData.morning} ng∆∞·ªùi<br>
          Bu·ªïi chi·ªÅu: ${dayData.afternoon} ng∆∞·ªùi<br>
          S·ªë c√¥ng ty: ${dayData.companies.length} c√¥ng ty
        </div>
      </div>
      
      <div style="margin-bottom: 25px;">
        <h3 style="color: #000000; font-weight: bold; margin-bottom: 15px;">Danh s√°ch c√¥ng ty</h3>
        <div style="line-height: 1.8; color: #000000; white-space: pre-line;">
${companyList}
        </div>
        ${dayData.companies.length > 6 ? `\n... v√† ${dayData.companies.length - 6} c√¥ng ty kh√°c` : ''}
      </div>
      
      <div style="margin-bottom: 25px;">
        <h3 style="color: #000000; font-weight: bold; margin-bottom: 15px;">G·ª£i √Ω ƒëi·ªÅu ch·ªânh</h3>
        <div style="line-height: 1.8; color: #000000;">
          ${suggestions.join('<br>')}
        </div>
      </div>
      
      <div style="border-top: 1px dotted #cccccc; padding-top: 15px; margin-top: 25px;">
        <small style="color: #000000;">
          Th·ªùi gian: ${timestamp}<br>
          Email t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Apps Script
        </small>
      </div>
      
    </div>
  `
}

/**
 * L∆∞u log c√°c email ƒë√£ g·ª≠i
 */
function recordSentAlerts(alertDays) {
  const sheet = getOrCreateLogSheet()
  
  alertDays.forEach(dayData => {
    const timestamp = new Date().toLocaleString('vi-VN')
    const topCompanies = dayData.companies
      .sort((a, b) => b.total - a.total)
      .slice(0, 3)
      .map(c => `${c.name}(${c.total})`)
      .join(', ')
    
    sheet.appendRow([
      formatDate(dayData.date),
      dayData.total,
      dayData.morning,
      dayData.afternoon,
      dayData.companies.length,
      topCompanies,
      `‚úÖ ${timestamp}`
    ])
  })
}

/**
 * Ki·ªÉm tra c√≥ trong khung gi·ªù c·∫£nh b√°o kh√¥ng
 */
function isInAlertTimeWindow() {
  const now = new Date()
  const hour = now.getHours()
  return hour >= ALERT_CONFIG.alertHours.start && hour <= ALERT_CONFIG.alertHours.end
}

/**
 * Format ng√†y theo ƒë·ªãnh d·∫°ng dd/mm/yyyy
 */
function formatDate(date) {
  const day = date.getDate().toString().padStart(2, '0')
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const year = date.getFullYear()
  return `${day}/${month}/${year}`
}

/**
 * L·∫•y breakdown s√°ng/chi·ªÅu cho m·ªôt ng√†y
 */
function getDayBreakdown(data, date) {
  let morning = 0, afternoon = 0
  
  data.forEach(record => {
    const examCount = getExamCountForDateNew(record, date)
    morning += examCount.morning
    afternoon += examCount.afternoon
  })
  
  return { morning, afternoon }
}

/**
 * L·∫•y danh s√°ch c√¥ng ty kh√°m trong ng√†y
 */
function getCompaniesForDate(data, date) {
  const companies = []
  
  data.forEach(record => {
    const examCount = getExamCountForDateNew(record, date)
    if (examCount.total > 0) {
      companies.push({
        name: record.companyName,
        total: examCount.total,
        morning: examCount.morning,
        afternoon: examCount.afternoon
      })
    }
  })
  
  return companies
}

/**
 * Test function ƒë·ªÉ ki·ªÉm tra email
 */
function testEmailAlert() {
  DEBUG_CONFIG.enabled = true
  
  // T·∫°o d·ªØ li·ªáu test
  const testDay = {
    date: new Date(),
    total: 250,
    morning: 120,
    afternoon: 130,
    threshold: 200,
    companies: [
      { name: 'VINGROUP', total: 80, morning: 40, afternoon: 40 },
      { name: 'FPT SOFTWARE', total: 60, morning: 30, afternoon: 30 },
      { name: 'VIETTEL', total: 45, morning: 20, afternoon: 25 },
      { name: 'TECHCOMBANK', total: 35, morning: 15, afternoon: 20 },
      { name: 'SAMSUNG', total: 30, morning: 15, afternoon: 15 }
    ]
  }
  
  console.log('G·ª≠i email test...')
  sendAlertEmail([testDay])
  console.log('Ho√†n th√†nh test email')
}